#!/usr/bin/env ruby

# @package MiGA
# @license Artistic-2.0

$:.push File.expand_path("../lib", File.dirname(__FILE__))

require "optparse"
require "miga"

##=> Global variables <=

$task_desc = {
  # Projects
  new: "Creates an empty MiGA project.",
  about: "Displays information about a MiGA project.",
  plugins: "Lists or (un)installs plugins in a MiGA project.",
  doctor: "Performs consistency checks on a MiGA project.",
  # Datasets
  add: "Creates an empty dataset in a pre-existing MiGA project.",
  get: "Downloads a dataset from public databases into a MiGA project.",
  ncbi_get: "Downloads all genomes in a taxon or RefSeq from NCBI into a MiGA project.",
  rm: "Removes a dataset from an MiGA project.",
  find: "Finds unregistered datasets based on result files.",
  ln: "Link datasets (including results) from one project to another.",
  ls: "Lists all registered datasets in an MiGA project.",
  # Results
  add_result: "Registers a result.",
  stats: "Extracts statistics for the given result.",
  files: "Lists all registered files from the results of a dataset or project.",
  run: "Executes locally one step analysis producing the given result.",
  # System
  init: "Initialize MiGA to process new projects.",
  daemon: "Controls the daemon of a MiGA project.",
  date: "Returns the current date in standard MiGA format.",
  console: "Opens an IRB console with MiGA.",
  # Taxonomy
  tax_set: "Registers taxonomic information for datasets.",
  tax_test: "Returns test of taxonomic distributions for query datasets.",
  tax_index: "Creates a taxonomy-indexed list of the datasets.",
  tax_dist: "Estimates distributions of distance by taxonomy.",
}

$task_alias = {
  # Projects
  create_project: :new,
  project_info: :about,
  # Datasets
  create_dataset: :add,
  download_dataset: :get,
  unlink_dataset: :rm,
  find_datasets: :find,
  import_datasets: :ln,
  list_datasets: :ls,
  # Results
  result_stats: :stats,
  list_files: :files,
  run_local: :run,
  # System
  c: :console,
  # Taxonomy
  add_taxonomy: :tax_set,
  test_taxonomy: :tax_test,
  index_taxonomy: :tax_index,
  tax_distributions: :tax_dist,
}

$task_alias.each do |nick, task|
  $task_desc[task] = (
    ($task_desc[task] =~ /\(alias: .*\)\./) ?
        $task_desc[task].sub(/\)\.$/, ", #{nick}).") :
        $task_desc[task].sub(/\.$/, " (alias: #{nick}).")
  )
end

##=> Functions <=

# OptParse banner
def opt_banner(opt)
  opt.banner = <<BAN
#{$task_desc[$task]}

Usage: #{$0} #{$task} [options]
BAN
  opt.separator ""
end

# OptParse flags that determine the object to load
def opt_object(opt, o, what=[:project, :dataset])
  opt.on("-P", "--project PATH", "(Mandatory) Path to the project."
    ){ |v| o[:project]=v } if what.include? :project
  opt.on("-D", "--dataset STRING",
    (what.include?(:dataset) ? "(Mandatory) " : "") +
    "Name of the dataset."){ |v| o[:dataset]=v } if what.include? :dataset or
      what.include? :dataset_opt
  opt.on("-D", "--dataset STRING", "Name of the dataset."
    ){ |v| o[:dataset]=v } if what.include? :dataset_opt
  opt.on("-t", "--type STRING",
    (what.include?(:dataset_type_req) ? "(Mandatory) " : "")+
    "Type of dataset. Recognized types include:",
    *MiGA::Dataset.KNOWN_TYPES.map{ |k,v| "~ #{k}: #{v[:description]}" }
    ){ |v| o[:type]=v.to_sym } if what.include? :dataset_type or
      what.include? :dataset_type_req
  opt.on("-t", "--type STRING",
    (what.include?(:project_type_req) ? "(Mandatory) " : "") +
    "Type of project. Recognized types include:",
    *MiGA::Project.KNOWN_TYPES.map{ |k,v| "~ #{k}: #{v[:description]}"}
    ){ |v| o[:type]=v.to_sym } if what.include? :project_type or
      what.include? :project_type_req
  opt.on("-r", "--result STRING",
    "(Mandatory) Name of the result to add.",
    "Recognized names for dataset-specific results include:",
    *MiGA::Dataset.RESULT_DIRS.keys.map{|n| " ~ #{n}"},
    "Recognized names for project-wide results include:",
    *MiGA::Project.RESULT_DIRS.keys.map{|n| " ~ #{n}"}
    ){ |v| o[:name]=v.downcase.to_sym } if what.include? :result
end

# OptParse flags common to all actions.
def opt_common(opt, o)
  opt.on("-v", "--verbose",
    "Print additional information to STDERR."){ o[:q]=false }
  opt.on("-d", "--debug INT", "Print debugging information to STDERR.") do |v|
    v.to_i>1 ? MiGA::MiGA.DEBUG_TRACE_ON : MiGA::MiGA.DEBUG_ON
  end
  opt.on("-h", "--help", "Display this screen.") do
    puts opt
    exit
  end
  opt.separator ""
end

# OptParse flags to filter lists of datasets.
def opt_filter_datasets(opt, o, what=[:ref, :multi, :taxonomy])
  opt.on("--[no-]ref",
    "If set, uses only reference (or only non-reference) datasets."
    ){ |v| o[:ref]=v } if what.include? :ref
  opt.on("--[no-]multi",
    "If set, uses only multi-species (or only single-species) datasets."
    ){ |v| o[:multi]=v } if what.include? :multi
  opt.on("-t", "--taxonomy RANK:TAXON", "Filter by taxonomy."
    ){ |v| o[:taxonomy]=MiGA::Taxonomy.new v } if what.include? :taxonomy
  opt.on("-k", "--key INTEGER",
    "Returns only the k-th dataset in the list."){ |v| o[:key]=v.to_i }
end

def opt_require(o, req={project:"-P", dataset:"-D"})
  req.each do |k,v|
    raise "#{v} is mandatory: please provide #{k}." if o[k].nil?
  end
end

def opt_require_type(o, klass)
  opt_require(o, type:"-t")
  raise "Unrecognized type: #{o[:type]}." if klass.KNOWN_TYPES[o[:type]].nil?
end

# Filters datasets by keys set in +opt_filter_datasets+.
def filter_datasets!(ds, o)
  ds.select!{|d| d.is_ref? == o[:ref] } unless o[:ref].nil?
  ds.select! do |d|
    o[:multi] ? d.is_multi? : d.is_nonmulti?
  end unless o[:multi].nil?
  ds.select! do |d|
    (not d.metadata[:tax].nil?) and d.metadata[:tax].is_in?(o[:taxonomy])
  end unless o[:taxonomy].nil?
  o[:key].nil? ? ds : ds.values_at(o[:key]-1)
end

def add_metadata(o, obj)
  o[:metadata].split(",").each do |pair|
    (k,v) = pair.split("=")
    case v
      when "true";  v = true
      when "false"; v = false
      when "nil";   v = nil
    end
    obj.metadata[k] = v
  end unless o[:metadata].nil?
  [:type, :name, :user, :description, :comments].each do |k|
    obj.metadata[k] = o[k] unless o[k].nil?
  end
  obj
end

##=> Main <=

execs = $task_desc.keys.map{ |k| k.to_s }

ARGV[0] = $task_alias[ARGV[0].to_sym] unless
  ARGV[0].nil? or $task_alias[ARGV[0].to_sym].nil?

case ARGV[0].to_s
when "-v", "--version"
  puts MiGA::MiGA.VERSION
when "-V", "--long-version"
  puts MiGA::MiGA.LONG_VERSION
when "-C", "--citation"
  puts MiGA::MiGA.CITATION
when "console"
  require "irb"
  require "irb/completion"
  ARGV.shift
  IRB.start
when *execs
  $task = ARGV.shift.to_sym
  ARGV << "-h" if ARGV.empty? and not [:date, :init].include? $task
  begin
    load File.expand_path("../actions/#{$task}.rb", File.dirname(__FILE__))
  rescue => err
    $stderr.puts "Exception: #{err}\n\n"
    err.backtrace.each { |l| $stderr.puts l + "\n" }
    err
  end
else
  print <<HELP

Microbial Genomes Atlas.

Usage: #{$0} {action} [options]

#{ MiGA::MiGA.tabulate([:action, :description], $task_desc.to_a).join("\n")}

generic options:
    -h, --help          Display this screen.
    -v, --version       Show MiGA version.
    -V, --long-version  Show complete MiGA version.
    -C, --citation      How to cite MiGA.

HELP
end
